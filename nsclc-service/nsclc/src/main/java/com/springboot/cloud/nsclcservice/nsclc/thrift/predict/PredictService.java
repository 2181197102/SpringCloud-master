/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.springboot.cloud.nsclcservice.nsclc.thrift.predict;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-04-12")
public class PredictService {

  public interface Iface {

    public PredictInfo predictNSCLC(java.lang.String image_path, java.lang.String label_path, java.lang.String modelLoc) throws DataException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void predictNSCLC(java.lang.String image_path, java.lang.String label_path, java.lang.String modelLoc, org.apache.thrift.async.AsyncMethodCallback<PredictInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PredictInfo predictNSCLC(java.lang.String image_path, java.lang.String label_path, java.lang.String modelLoc) throws DataException, org.apache.thrift.TException
    {
      send_predictNSCLC(image_path, label_path, modelLoc);
      return recv_predictNSCLC();
    }

    public void send_predictNSCLC(java.lang.String image_path, java.lang.String label_path, java.lang.String modelLoc) throws org.apache.thrift.TException
    {
      predictNSCLC_args args = new predictNSCLC_args();
      args.setImage_path(image_path);
      args.setLabel_path(label_path);
      args.setModelLoc(modelLoc);
      sendBase("predictNSCLC", args);
    }

    public PredictInfo recv_predictNSCLC() throws DataException, org.apache.thrift.TException
    {
      predictNSCLC_result result = new predictNSCLC_result();
      receiveBase(result, "predictNSCLC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataException != null) {
        throw result.dataException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "predictNSCLC failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void predictNSCLC(java.lang.String image_path, java.lang.String label_path, java.lang.String modelLoc, org.apache.thrift.async.AsyncMethodCallback<PredictInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      predictNSCLC_call method_call = new predictNSCLC_call(image_path, label_path, modelLoc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class predictNSCLC_call extends org.apache.thrift.async.TAsyncMethodCall<PredictInfo> {
      private java.lang.String image_path;
      private java.lang.String label_path;
      private java.lang.String modelLoc;
      public predictNSCLC_call(java.lang.String image_path, java.lang.String label_path, java.lang.String modelLoc, org.apache.thrift.async.AsyncMethodCallback<PredictInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.image_path = image_path;
        this.label_path = label_path;
        this.modelLoc = modelLoc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("predictNSCLC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        predictNSCLC_args args = new predictNSCLC_args();
        args.setImage_path(image_path);
        args.setLabel_path(label_path);
        args.setModelLoc(modelLoc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PredictInfo getResult() throws DataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_predictNSCLC();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("predictNSCLC", new predictNSCLC());
      return processMap;
    }

    public static class predictNSCLC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, predictNSCLC_args> {
      public predictNSCLC() {
        super("predictNSCLC");
      }

      public predictNSCLC_args getEmptyArgsInstance() {
        return new predictNSCLC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public predictNSCLC_result getResult(I iface, predictNSCLC_args args) throws org.apache.thrift.TException {
        predictNSCLC_result result = new predictNSCLC_result();
        try {
          result.success = iface.predictNSCLC(args.image_path, args.label_path, args.modelLoc);
        } catch (DataException dataException) {
          result.dataException = dataException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("predictNSCLC", new predictNSCLC());
      return processMap;
    }

    public static class predictNSCLC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, predictNSCLC_args, PredictInfo> {
      public predictNSCLC() {
        super("predictNSCLC");
      }

      public predictNSCLC_args getEmptyArgsInstance() {
        return new predictNSCLC_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PredictInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PredictInfo>() {
          public void onComplete(PredictInfo o) {
            predictNSCLC_result result = new predictNSCLC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            predictNSCLC_result result = new predictNSCLC_result();
            if (e instanceof DataException) {
              result.dataException = (DataException) e;
              result.setDataExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, predictNSCLC_args args, org.apache.thrift.async.AsyncMethodCallback<PredictInfo> resultHandler) throws org.apache.thrift.TException {
        iface.predictNSCLC(args.image_path, args.label_path, args.modelLoc,resultHandler);
      }
    }

  }

  public static class predictNSCLC_args implements org.apache.thrift.TBase<predictNSCLC_args, predictNSCLC_args._Fields>, java.io.Serializable, Cloneable, Comparable<predictNSCLC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("predictNSCLC_args");

    private static final org.apache.thrift.protocol.TField IMAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("image_path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LABEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("label_path", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("modelLoc", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new predictNSCLC_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new predictNSCLC_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String image_path; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String label_path; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String modelLoc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_PATH((short)1, "image_path"),
      LABEL_PATH((short)2, "label_path"),
      MODEL_LOC((short)3, "modelLoc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_PATH
            return IMAGE_PATH;
          case 2: // LABEL_PATH
            return LABEL_PATH;
          case 3: // MODEL_LOC
            return MODEL_LOC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("image_path", org.apache.thrift.TFieldRequirementType.REQUIRED,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.LABEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("label_path", org.apache.thrift.TFieldRequirementType.REQUIRED,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.MODEL_LOC, new org.apache.thrift.meta_data.FieldMetaData("modelLoc", org.apache.thrift.TFieldRequirementType.REQUIRED,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(predictNSCLC_args.class, metaDataMap);
    }

    public predictNSCLC_args() {
    }

    public predictNSCLC_args(
            java.lang.String image_path,
            java.lang.String label_path,
            java.lang.String modelLoc)
    {
      this();
      this.image_path = image_path;
      this.label_path = label_path;
      this.modelLoc = modelLoc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public predictNSCLC_args(predictNSCLC_args other) {
      if (other.isSetImage_path()) {
        this.image_path = other.image_path;
      }
      if (other.isSetLabel_path()) {
        this.label_path = other.label_path;
      }
      if (other.isSetModelLoc()) {
        this.modelLoc = other.modelLoc;
      }
    }

    public predictNSCLC_args deepCopy() {
      return new predictNSCLC_args(this);
    }

    @Override
    public void clear() {
      this.image_path = null;
      this.label_path = null;
      this.modelLoc = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getImage_path() {
      return this.image_path;
    }

    public predictNSCLC_args setImage_path(@org.apache.thrift.annotation.Nullable java.lang.String image_path) {
      this.image_path = image_path;
      return this;
    }

    public void unsetImage_path() {
      this.image_path = null;
    }

    /** Returns true if field image_path is set (has been assigned a value) and false otherwise */
    public boolean isSetImage_path() {
      return this.image_path != null;
    }

    public void setImage_pathIsSet(boolean value) {
      if (!value) {
        this.image_path = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLabel_path() {
      return this.label_path;
    }

    public predictNSCLC_args setLabel_path(@org.apache.thrift.annotation.Nullable java.lang.String label_path) {
      this.label_path = label_path;
      return this;
    }

    public void unsetLabel_path() {
      this.label_path = null;
    }

    /** Returns true if field label_path is set (has been assigned a value) and false otherwise */
    public boolean isSetLabel_path() {
      return this.label_path != null;
    }

    public void setLabel_pathIsSet(boolean value) {
      if (!value) {
        this.label_path = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelLoc() {
      return this.modelLoc;
    }

    public predictNSCLC_args setModelLoc(@org.apache.thrift.annotation.Nullable java.lang.String modelLoc) {
      this.modelLoc = modelLoc;
      return this;
    }

    public void unsetModelLoc() {
      this.modelLoc = null;
    }

    /** Returns true if field modelLoc is set (has been assigned a value) and false otherwise */
    public boolean isSetModelLoc() {
      return this.modelLoc != null;
    }

    public void setModelLocIsSet(boolean value) {
      if (!value) {
        this.modelLoc = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case IMAGE_PATH:
          if (value == null) {
            unsetImage_path();
          } else {
            setImage_path((java.lang.String)value);
          }
          break;

        case LABEL_PATH:
          if (value == null) {
            unsetLabel_path();
          } else {
            setLabel_path((java.lang.String)value);
          }
          break;

        case MODEL_LOC:
          if (value == null) {
            unsetModelLoc();
          } else {
            setModelLoc((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case IMAGE_PATH:
          return getImage_path();

        case LABEL_PATH:
          return getLabel_path();

        case MODEL_LOC:
          return getModelLoc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case IMAGE_PATH:
          return isSetImage_path();
        case LABEL_PATH:
          return isSetLabel_path();
        case MODEL_LOC:
          return isSetModelLoc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof predictNSCLC_args)
        return this.equals((predictNSCLC_args)that);
      return false;
    }

    public boolean equals(predictNSCLC_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_image_path = true && this.isSetImage_path();
      boolean that_present_image_path = true && that.isSetImage_path();
      if (this_present_image_path || that_present_image_path) {
        if (!(this_present_image_path && that_present_image_path))
          return false;
        if (!this.image_path.equals(that.image_path))
          return false;
      }

      boolean this_present_label_path = true && this.isSetLabel_path();
      boolean that_present_label_path = true && that.isSetLabel_path();
      if (this_present_label_path || that_present_label_path) {
        if (!(this_present_label_path && that_present_label_path))
          return false;
        if (!this.label_path.equals(that.label_path))
          return false;
      }

      boolean this_present_modelLoc = true && this.isSetModelLoc();
      boolean that_present_modelLoc = true && that.isSetModelLoc();
      if (this_present_modelLoc || that_present_modelLoc) {
        if (!(this_present_modelLoc && that_present_modelLoc))
          return false;
        if (!this.modelLoc.equals(that.modelLoc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetImage_path()) ? 131071 : 524287);
      if (isSetImage_path())
        hashCode = hashCode * 8191 + image_path.hashCode();

      hashCode = hashCode * 8191 + ((isSetLabel_path()) ? 131071 : 524287);
      if (isSetLabel_path())
        hashCode = hashCode * 8191 + label_path.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelLoc()) ? 131071 : 524287);
      if (isSetModelLoc())
        hashCode = hashCode * 8191 + modelLoc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(predictNSCLC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetImage_path()).compareTo(other.isSetImage_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_path, other.image_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLabel_path()).compareTo(other.isSetLabel_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLabel_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label_path, other.label_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelLoc()).compareTo(other.isSetModelLoc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelLoc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelLoc, other.modelLoc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("predictNSCLC_args(");
      boolean first = true;

      sb.append("image_path:");
      if (this.image_path == null) {
        sb.append("null");
      } else {
        sb.append(this.image_path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("label_path:");
      if (this.label_path == null) {
        sb.append("null");
      } else {
        sb.append(this.label_path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelLoc:");
      if (this.modelLoc == null) {
        sb.append("null");
      } else {
        sb.append(this.modelLoc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (image_path == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'image_path' was not present! Struct: " + toString());
      }
      if (label_path == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'label_path' was not present! Struct: " + toString());
      }
      if (modelLoc == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelLoc' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class predictNSCLC_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public predictNSCLC_argsStandardScheme getScheme() {
        return new predictNSCLC_argsStandardScheme();
      }
    }

    private static class predictNSCLC_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<predictNSCLC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, predictNSCLC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image_path = iprot.readString();
                struct.setImage_pathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LABEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.label_path = iprot.readString();
                struct.setLabel_pathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_LOC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelLoc = iprot.readString();
                struct.setModelLocIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, predictNSCLC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.image_path != null) {
          oprot.writeFieldBegin(IMAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.image_path);
          oprot.writeFieldEnd();
        }
        if (struct.label_path != null) {
          oprot.writeFieldBegin(LABEL_PATH_FIELD_DESC);
          oprot.writeString(struct.label_path);
          oprot.writeFieldEnd();
        }
        if (struct.modelLoc != null) {
          oprot.writeFieldBegin(MODEL_LOC_FIELD_DESC);
          oprot.writeString(struct.modelLoc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class predictNSCLC_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public predictNSCLC_argsTupleScheme getScheme() {
        return new predictNSCLC_argsTupleScheme();
      }
    }

    private static class predictNSCLC_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<predictNSCLC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, predictNSCLC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.image_path);
        oprot.writeString(struct.label_path);
        oprot.writeString(struct.modelLoc);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, predictNSCLC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.image_path = iprot.readString();
        struct.setImage_pathIsSet(true);
        struct.label_path = iprot.readString();
        struct.setLabel_pathIsSet(true);
        struct.modelLoc = iprot.readString();
        struct.setModelLocIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class predictNSCLC_result implements org.apache.thrift.TBase<predictNSCLC_result, predictNSCLC_result._Fields>, java.io.Serializable, Cloneable, Comparable<predictNSCLC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("predictNSCLC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new predictNSCLC_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new predictNSCLC_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PredictInfo success; // required
    public @org.apache.thrift.annotation.Nullable DataException dataException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_EXCEPTION((short)1, "dataException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_EXCEPTION
            return DATA_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PredictInfo.class)));
      tmpMap.put(_Fields.DATA_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataException", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(predictNSCLC_result.class, metaDataMap);
    }

    public predictNSCLC_result() {
    }

    public predictNSCLC_result(
            PredictInfo success,
            DataException dataException)
    {
      this();
      this.success = success;
      this.dataException = dataException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public predictNSCLC_result(predictNSCLC_result other) {
      if (other.isSetSuccess()) {
        this.success = new PredictInfo(other.success);
      }
      if (other.isSetDataException()) {
        this.dataException = new DataException(other.dataException);
      }
    }

    public predictNSCLC_result deepCopy() {
      return new predictNSCLC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PredictInfo getSuccess() {
      return this.success;
    }

    public predictNSCLC_result setSuccess(@org.apache.thrift.annotation.Nullable PredictInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DataException getDataException() {
      return this.dataException;
    }

    public predictNSCLC_result setDataException(@org.apache.thrift.annotation.Nullable DataException dataException) {
      this.dataException = dataException;
      return this;
    }

    public void unsetDataException() {
      this.dataException = null;
    }

    /** Returns true if field dataException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataException() {
      return this.dataException != null;
    }

    public void setDataExceptionIsSet(boolean value) {
      if (!value) {
        this.dataException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((PredictInfo)value);
          }
          break;

        case DATA_EXCEPTION:
          if (value == null) {
            unsetDataException();
          } else {
            setDataException((DataException)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case DATA_EXCEPTION:
          return getDataException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case DATA_EXCEPTION:
          return isSetDataException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof predictNSCLC_result)
        return this.equals((predictNSCLC_result)that);
      return false;
    }

    public boolean equals(predictNSCLC_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataException = true && this.isSetDataException();
      boolean that_present_dataException = true && that.isSetDataException();
      if (this_present_dataException || that_present_dataException) {
        if (!(this_present_dataException && that_present_dataException))
          return false;
        if (!this.dataException.equals(that.dataException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataException()) ? 131071 : 524287);
      if (isSetDataException())
        hashCode = hashCode * 8191 + dataException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(predictNSCLC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataException()).compareTo(other.isSetDataException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataException, other.dataException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("predictNSCLC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataException:");
      if (this.dataException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class predictNSCLC_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public predictNSCLC_resultStandardScheme getScheme() {
        return new predictNSCLC_resultStandardScheme();
      }
    }

    private static class predictNSCLC_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<predictNSCLC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, predictNSCLC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PredictInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataException = new DataException();
                struct.dataException.read(iprot);
                struct.setDataExceptionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, predictNSCLC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataException != null) {
          oprot.writeFieldBegin(DATA_EXCEPTION_FIELD_DESC);
          struct.dataException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class predictNSCLC_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public predictNSCLC_resultTupleScheme getScheme() {
        return new predictNSCLC_resultTupleScheme();
      }
    }

    private static class predictNSCLC_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<predictNSCLC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, predictNSCLC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataException()) {
          struct.dataException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, predictNSCLC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PredictInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataException = new DataException();
          struct.dataException.read(iprot);
          struct.setDataExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
